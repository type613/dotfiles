" 改行コードの自動認識
set fileformats=unix,dos,mac
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

"---------------------------------------------------------------------------
set ts=8 sts=8 sw=8 tw=0
set noexpandtab

"---------------------------------------------------------------------------
" 検索の挙動に関する設定:
"
" 検索時に大文字小文字を無視 (noignorecase:無視しない)
set ignorecase
" 大文字小文字の両方が含まれている場合は大文字小文字を区別
set smartcase

"インクリメンタルサーチ
set incsearch

"検索結果をハイライト表示
set hlsearch

"---------------------------------------------------------------------------

"---------------------------------------------------------------------------
" 編集に関する設定:
"
" タブの画面上での幅
set tabstop=8
" タブをスペースに展開しない (expandtab:展開する)
set noexpandtab
" 自動的にインデントする (noautoindent:インデントしない)
set autoindent
" バックスペースでインデントや改行を削除できるようにする
set backspace=2
" 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
set wrapscan
" 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)
set showmatch
" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmenu
" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM
" 日本語整形スクリプト(by. 西岡拓洋さん)用の設定
let format_allow_over_tw = 1    " ぶら下り可能幅

"---------------------------------------------------------------------------
" GUI固有ではない画面表示の設定:
"
" 行番号を非表示 (number:表示)
set nonumber
" ルーラーを表示 (noruler:非表示)
set ruler
" タブや改行を表示 (list:表示)
set nolist
" どの文字でタブや改行を表示するかを設定
"set listchars=tab:>-,extends:<,trail:-,eol:<
" 長い行を折り返して表示 (nowrap:折り返さない)
set wrap
" 常にステータス行を表示 (詳細は:he laststatus)
set laststatus=2
" コマンドラインの高さ (Windows用gvim使用時はgvimrcを編集すること)
set cmdheight=2
" コマンドをステータス行に表示
set showcmd
" タイトルを表示
set title
" 画面を黒地に白にする (次行の先頭の " を削除すれば有効になる)
"colorscheme evening " (Windows用gvim使用時はgvimrcを編集すること)

"---------------------------------------------------------------------------
" ファイル操作に関する設定:
"
" バックアップファイルを作成しない (次行の先頭の " を削除すれば有効になる)
"set nobackup


"---------------------------------------------------------------------------
" ファイル名に大文字小文字の区別がないシステム用の設定:
"   (例: DOS/Windows/MacOS)
"
if filereadable($VIM . '/vimrc') && filereadable($VIM . '/ViMrC')
  " tagsファイルの重複防止
  set tags=./tags,tags
endif
"---------------------------------------------------------------------------

"---------------------------------------------------------------------------

"---------------------------------------------------------------------------
" プラットホーム依存の特別な設定

set sw=8
if &t_Co > 1
  syntax on
endif
set showcmd
set showmatch
set matchtime=2
set wildmenu
set textwidth=0
set wrap
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

" ステータスラインに表示する情報の指定
"set statusline=%n\:%y%F\ \|%{(&fenc!=''?&fenc:&enc).'\|'.&ff.'\|'}%m%r%=<%l/%L:%p%%>
" ステータスラインの色
"highlight StatusLine   term=NONE cterm=NONE ctermfg=black ctermbg=white

set vb t_vb=


se backupext=.bak
"se nohls

nmap <C-p> :bp<CR>
nmap <C-n> :bn<CR>





" ### NeoBandle ### {{{
if has('vim_starting')
  set nocompatible
  set runtimepath+=~/.vim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.vim/bundle'))

" neobundle.vim自身をneobundle.vimで管理する
NeoBundleFetch 'Shougo/neobundle.vim'

""""""""""""""""""""""""""""""""
"ここにインストールしたいプラグインの設定を書く
"https://github.com/{user}/{repo}で公開されているプラグイン
"NeoBundle '{user}/{repo}`
"
"www.vim.org/scripts/で公開されているプラグイン
"NeoBundle '{プラグイン名}'
"
"プラグインのリポジトリをgit://プロトコルで直接指定
"NeoBundle 'git://....'
"
"プラグインのアップデートは:NeoBundleUpdate
"削除はプラグインのロード行を削除した上で:NeoBundle Clean {プラグイン名}
""""""""""""""""""""""""""""""""
"ヘルプの日本語化プラグイン
NeoBundle 'vim-jp/vimdoc-ja'
set helplang=ja,en

"Unite
NeoBundle 'Shougo/unite.vim.git'
" 入力モードで開始する
" let g:unite_enable_start_insert=1
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')

"カラースキーム
NeoBundle 'junegunn/seoul256.vim.git'

"ag.vim
"先にbrew install agしておく
NeoBundle 'rking/ag.vim.git'

"vim-markdown
NeoBundle 'tpope/vim-markdown.git'
au BufRead,BufNewFile *.md set filetype=markdown

"previm
"MarkDownファイルを開いて、:PrevimOpenするとブラウザで開く
NeoBundle 'kannokanno/previm'
"open-browser.vim
NeoBundle 'tyru/open-browser.vim'

"NERDTree
"\eでファイルブラウザを開く
NeoBundle 'scrooloose/nerdtree'
map <silent> <leader>e :NERDTreeToggle<cr>

"taglist
NeoBundle 'vim-scripts/taglist.vim'
let Tlist_Show_One_File = 1
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1
map <silent> <leader>E :TlistToggle<cr>

"tagbar
"NeoBundle 'majutsushi/tagbar'

"caw
"\cでコメントアウト/インを切り替える。
NeoBundle "tyru/caw.vim.git"
nmap <Leader>c <Plug>(caw:i:toggle)
vmap <Leader>c <Plug>(caw:i:toggle)

call neobundle#end()

filetype plugin indent on

"プラグインがインストールされているかチェック
NeoBundleCheck

if !has('vim_starting')
  " .vimrcを読み込み直した時の為の設定
  call neobundle#call_hook('on_source')
endif
" }}}

colorscheme default

let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_color_change_perdent = 10
let g:indent_guides_guide_size = 1
"let g:indent_guide_auto_colors = 0
hi IndentGuideOdd ctermbg=black
hi IndentGuideEven ctermbg=darkgrey
"autocmd VimEnter,Colorscheme * : hi IndentGuideOdd guibg=red ctermbg=3
"autocmd VimEnter,Colorscheme * : hi IndentGuideEven guibg=green ctermbg=4

if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	\ | wincmd p | diffthis
endif

"バッファリストは:lsか:buffersで確認
" ノーマルモードでbpでバッファリストのひとつ前のバッファを開く
"nnoremap <silent>bp :bprevious<CR>
" ノーマルモードでbnでバッファリストの次のバッファを開く
"nnoremap <silent>bn :bnext<CR>
" ノーマルモードでbbで直前のバッファを開く
"nnoremap <silent>bb :b#<CR>


"Java用ハイライト追加
let java_highlight_all=1
let java_highlight_functions="style"
let java_allow_cpp_keywords=1




